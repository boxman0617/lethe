<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>enemy_parent</parentName>
  <maskName>mask_boxthing</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_life = 5;
life = 5;

my_head = instance_create(x, y, boxthing_head);
my_head.parent_id = id;
my_body = instance_create(x, y, boxthing_body);
my_body.parent_id = id;

// Down = 0;
// Right = 1;
// Up = 2;
// Left = 3;
facing = round(random(5));
stepsCounter = 0;
mode = 0; // Moving = 0; Following = 1;
switchRandMin = 10;
switchRandMax = 51;
switchAt = round(random_range(switchRandMin, switchRandMax));
distanceThreshold = 100;

mspeed = 3;

pause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(life &lt;= 0) {
    with(my_head) {
        instance_destroy();
    }
    with(my_body) {
        instance_destroy();
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pause == false) {
    if(mode == 0) {
        switch(facing) {
            case 0: // Down
                if(place_free(x, y + mspeed)) {
                    y += mspeed;
                } else {
                    facing = 2;
                }
                break;
            case 1: // Right
                if(place_free(x - mspeed, y)) {
                    x -= mspeed;
                } else {
                    facing = 3;
                }
                break;
            case 2: // Up
                if(place_free(x, y - mspeed)) {
                    y -= mspeed;
                } else {
                    facing = 0;
                }
                break;
            case 3: // Left
                if(place_free(x + mspeed, y)) {
                    x += mspeed;
                } else {
                    facing = 1;
                }
                break;
        }
        stepsCounter++;
        
        if(stepsCounter &gt;= switchAt) {
            facing = round(random(5));
            stepsCounter = 0;
            switchAt = round(random_range(switchRandMin, switchRandMax));
        }
        var distanceToLethe = distance_to_point(lethe.x, lethe.y);
        if(distanceToLethe &lt; distanceThreshold) {
            mode = 1;
        }
    } else if(mode == 1) {
        move_towards_point(lethe.x, lethe.y, mspeed + 0.5);
        
        var distanceToLethe = distance_to_point(lethe.x, lethe.y);
        if(distanceToLethe &gt; distanceThreshold) {
            mode = 0;
            speed = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
