<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_LMD</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// HP
max_life = 4;
life = 4;

// Settings
view_follow = false;

// Speeds
mspeed = 2;
img_speed = 0.5;
image_speed = img_speed;

// States
isMoving = false;
isAttacking = false;
canAttack = true;
canBeDamaged = true;
flashCounter = 0;
isAI = false;

// Equipt
equiptWeapon = "stick";

// Direction states
facing = DIR_DOWN; // Down
facingDir = "down";

// Lethe spr facing array
dirOfBody[0]=spr_LMR; // Right
dirOfBody[1]=spr_LMU;
dirOfBody[2]=spr_LMU;
dirOfBody[3]=spr_LMU;
dirOfBody[4]=spr_LML; // Left
dirOfBody[5]=spr_LMD;
dirOfBody[6]=spr_LMD;
dirOfBody[7]=spr_LMD;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resetting flash after being hit
flashCounter = 0;
canBeDamaged = true;
image_alpha = 1.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stopping pushback
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(life &lt;= 0) {
    game_restart(); // @ToDo
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control facing, weapons, and movement
if(!isAI) {
    var vx = (keyboard_check(Keys.move_key_right) - keyboard_check(Keys.move_key_left)) * 2;
    var vy = (keyboard_check(Keys.move_key_down) - keyboard_check(Keys.move_key_up)) * 2;
    
    if(vx != 0 || vy != 0) {
        facing = round(point_direction(0, 0, vx, vy) / 45) mod 8;
        var didMove = false;
        
        if(place_free(x, y + (vy * mspeed))) {
            y += vy * mspeed;
            didMove = true;
        }
        if(place_free(x + (vx * mspeed), y)) {
            x += vx * mspeed;
            didMove = true;
        }
        
        if(didMove) {
            isMoving = true;
        }
    } else {
        isMoving = false;
    }
}

if(equiptWeapon == "stick") {
    if(!instance_exists(stick)) {
        instance_create(x, y, stick);
    }
}

if(facing == 0) {
    facingDir = "right";
} else if(facing &gt; 0 &amp;&amp; facing &lt; 4) {
    facingDir = "up";
} else if(facing == 4) {
    facingDir = "left";
} else {
    facingDir = "down";
}

if(!isAI) {
    if(keyboard_check(Keys.attack_key) &amp;&amp; canAttack) {
        canAttack = false;
        switch(equiptWeapon) {
            case "stick":
                stick.image_index = 0;
                stick.canCauseDamage = true;
                if(facingDir == "down") {
                    stick.sprite_index = attack_stick_down;
                } else if(facingDir == "up") {
                    stick.sprite_index = attack_stick_up;
                } else if(facingDir == "left") {
                    stick.sprite_index = attack_stick_left;
                } else if(facingDir == "right") {
                    stick.sprite_index = attack_stick_right;
                }
                break;
        }
    }
}

if(canBeDamaged == false) {
    if(flashCounter mod 2 == 0) {
        if(image_alpha == 1.0) {
            image_alpha = 0.3;
        } else {
            image_alpha = 1.0;
        }
    }
    
    flashCounter++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control spr
sprite_index = dirOfBody[facing];

if(!isMoving) {
    image_speed = 0;
    image_index = 0;
} else {
    image_speed = img_speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When room is set to follow player
if(view_follow) {
    view_xview[0] = x - view_wview[0] / 2 + sprite_width / 2;
    view_yview[0] = y - view_hview[0] / 2 + sprite_height / 2;
    
    if(view_xview[0] &lt; 0) 
    {
        view_xview[0] = 0;
    }
    else if(view_xview[0] &gt; room_width - view_wview[0])
    {
        view_xview[0] = room_width - view_wview[0];
    }
    if(view_yview[0] &lt; 0)
    {
        view_yview[0] = 0;
    }
    else if(view_yview[0] &gt; room_height - view_hview[0])
    {
        view_yview[0] = room_height - view_hview[0];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemy_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(canBeDamaged) {
    life--;
    canBeDamaged = false;
}

var offset = 40;
var fallBackSpeed = 4;
var dir = point_direction(x, y, other.x, other.y);
var xDir = lengthdir_x(offset, dir);
var yDir = lengthdir_y(offset, dir);

var endX = x - xDir;
var endY = y - yDir;

move_towards_point(endX, endY, fallBackSpeed);

alarm[0] = 5; // Stop pushback
alarm[1] = room_speed; // Flashing end
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
